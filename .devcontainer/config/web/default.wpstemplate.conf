# Nginx configuration file
# Configuration for development in Dev Container, intended to be as similar as possible to production environment.

server {
    listen 80;
    server_name  _;
    root /workspaces/{{project_name}}/cms/web;
    index index.php;

    # Set maximum size for media uploads
    client_max_body_size 64M;

    # Security headers
    # Hide Nginx version information
    server_tokens off;
    # Clickjacking protection: send both legacy X-Frame-Options and modern CSP frame-ancestors for broader compatibility
    # Keep both headers temporarily; X-Frame-Options can be removed once legacy browser support is no longer required.
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header Content-Security-Policy "frame-ancestors 'self';" always;
    # Prevent MIME type sniffing
    add_header X-Content-Type-Options "nosniff" always;
    # Control referrer information transmission (send only origin on cross-origin)
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Gzip compression settings
    gzip on;
    gzip_vary on;
    # Compress only files larger than 1KB
    gzip_min_length 1024;
    # Compression level (1-9, 6 is recommended)
    gzip_comp_level 6;
    # Whether to compress when proxied
    gzip_proxied any;
    # MIME types to compress
    gzip_types text/plain text/css text/xml application/xml application/json application/javascript application/rss+xml application/xml+rss image/svg+xml;

    # FastCGI buffer settings (performance optimization)
    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;

    # Proxy headers (for passing client information to backend)
    # Pass the original Host header from the client request
    proxy_set_header Host $host;
    # Pass the real client IP address
    proxy_set_header X-Real-IP $remote_addr;
    # Append client IP to the chain of proxy addresses
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Reject requests with unsupported HTTP method
    if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
        return 405;
    }

    # Main routing (WordPress permalink processing)
    location / {
        try_files $uri $uri/ /index.php$is_args$args;
    }

    # Cache settings for static files
    # Set long-term browser caching assuming unique filenames using UUID or cache busting design
    location ~* \.(?:css|js|mjs|map|jpg|jpeg|png|gif|svg|ico|webp|avif|ttf|otf|woff|woff2)$ {
        access_log off;
        log_not_found off;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
        try_files $uri =404;
    }

    # Disable logging for robots.txt
    location = /robots.txt {
        access_log off;
        log_not_found off;
    }

    # Deny access to hidden files (except .well-known)
    # Allow .well-known used for certificate issuance such as Let's Encrypt
    location ~* /\.(?!well-known/).* {
        deny all;
    }

    # Deny access to dependency management files
    # Protect sensitive information such as package version information
    location ~* /(composer\.(json|lock)|package\.json|yarn\.lock|pnpm-lock\.yaml)$ {
        deny all;
    }

    # Deny access to vulnerable WordPress PHP files
    # wp-config.php: Configuration file containing database credentials
    # xmlrpc.php: Frequently targeted for DDoS attacks and brute force attacks
    location ~* /(wp-config|xmlrpc)\.php {
        deny all;
    }

    # Deny direct access to template files
    # These files should not be executed as PHP
    location ~* \.(blade\.php|twig|mustache)$ {
        deny all;
    }

    # Prevent PHP file execution in upload directory
    # Prevent execution of maliciously uploaded files
    location ~* ^/app/uploads/.*\.php$ {
        deny all;
    }

    # Deny direct access to PHP files in themes, plugins, and mu-plugins directories
    # These should only be executed through the WordPress framework
    location ~* ^/app/(themes|plugins|mu-plugins)/.*\.php$ {
        deny all;
    }

    # WordPress front controller (entry point for REST API, etc.)
    location = /index.php {
        fastcgi_pass app:9000;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_script_name;
    }

    # Allow PHP execution for WordPress core files (in /wp/ directory)
    # In Bedrock configuration, WordPress core is placed in the /wp/ directory
    location ~ ^/wp/.*\.php$ {
        fastcgi_pass app:9000;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_script_name;
        include fastcgi_params;
    }

    # Deny access to all other PHP files
    # Treat everything not explicitly allowed or denied above as 404
    location ~ \.php$ {
        return 404;
    }
}
